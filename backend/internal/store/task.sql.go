// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package store

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  id,
  creator_id,
  title,
  description,
  deadline
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, description, creator_id, deadline, completed, created_at
`

type CreateTaskParams struct {
	ID          string      `json:"id"`
	CreatorID   int64       `json:"creator_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Deadline    time.Time   `json:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ID,
		arg.CreatorID,
		arg.Title,
		arg.Description,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.Deadline,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, creator_id, deadline, completed, created_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.Deadline,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT 
  id, title, description, creator_id, deadline, completed, created_at,
  COUNT(*) OVER() AS total
FROM tasks
WHERE 
  creator_id = $1
  AND (
    title ILIKE '%' || COALESCE($4, '') || '%'
    OR 
    description ILIKE '%' || COALESCE($5, '') || '%'
  )
  AND (
    $6::timestamptz IS NULL
    OR deadline >= $6
  )
  AND (
    $7::timestamptz IS NULL
    OR deadline <= $7
  )
  AND (
    $8::bool IS NULL 
    OR completed = $8::bool
  )
  ORDER BY completed ASC, deadline ASC
  LIMIT $2 OFFSET $3
`

type GetTasksParams struct {
	CreatorID     int64              `json:"creator_id"`
	Limit         int32              `json:"limit"`
	Offset        int32              `json:"offset"`
	Title         pgtype.Text        `json:"title"`
	Description   pgtype.Text        `json:"description"`
	StartDeadline pgtype.Timestamptz `json:"start_deadline"`
	EndDeadline   pgtype.Timestamptz `json:"end_deadline"`
	Completed     pgtype.Bool        `json:"completed"`
}

type GetTasksRow struct {
	ID          string      `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	CreatorID   int64       `json:"creator_id"`
	Deadline    time.Time   `json:"deadline"`
	Completed   bool        `json:"completed"`
	CreatedAt   time.Time   `json:"created_at"`
	Total       int64       `json:"total"`
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]GetTasksRow, error) {
	rows, err := q.db.Query(ctx, getTasks,
		arg.CreatorID,
		arg.Limit,
		arg.Offset,
		arg.Title,
		arg.Description,
		arg.StartDeadline,
		arg.EndDeadline,
		arg.Completed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTasksRow{}
	for rows.Next() {
		var i GetTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatorID,
			&i.Deadline,
			&i.Completed,
			&i.CreatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
  title = COALESCE($2, title),
  description = COALESCE($3, description),
  deadline = COALESCE($4, deadline),
  completed = COALESCE($5, completed)
WHERE
  id = $1
RETURNING id, title, description, creator_id, deadline, completed, created_at
`

type UpdateTaskParams struct {
	ID          string             `json:"id"`
	Title       pgtype.Text        `json:"title"`
	Description pgtype.Text        `json:"description"`
	Deadline    pgtype.Timestamptz `json:"deadline"`
	Completed   pgtype.Bool        `json:"completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Deadline,
		arg.Completed,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.Deadline,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}
